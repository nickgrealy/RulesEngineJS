Array.prototype.indexOf||(Array.prototype.indexOf=function(a,f){var c;if(null==this)throw new TypeError('"this" is null or not defined');var d=Object(this),b=d.length>>>0;if(0===b)return-1;c=+f||0;Infinity===Math.abs(c)&&(c=0);if(c>=b)return-1;for(c=Math.max(0<=c?c:b-Math.abs(c),0);c<b;){if(c in d&&d[c]===a)return c;c++}return-1});
Array.prototype.compare||(Array.prototype.compare=function(a){var f=[],c=this.slice(0);a=a.slice(0);for(var d=c.length-1;-1<d;d--){var b=a.indexOf(this[d]);-1<b&&(c.splice(d,1),a.splice(b,1),f[f.length]=this[d])}return{intersection:f,leftComplement:c,rightComplement:a,left:c,right:a,equal:0==c.length&&0==a.length}});
Array.prototype.filter||(Array.prototype.filter=function(a){if(void 0===this||null===this)throw new TypeError;var f=Object(this),c=f.length>>>0;if("function"!==typeof a)throw new TypeError;for(var d=[],b=2<=arguments.length?arguments[1]:void 0,e=0;e<c;e++)if(e in f){var g=f[e];a.call(b,g,e,f)&&d.push(g)}return d});
Array.prototype.map||(Array.prototype.map=function(a,f){var c,d,b;if(null==this)throw new TypeError(" this is null or not defined");var e=Object(this),g=e.length>>>0;if("function"!==typeof a)throw new TypeError(a+" is not a function");1<arguments.length&&(c=f);d=Array(g);for(b=0;b<g;){var h;b in e&&(h=e[b],h=a.call(c,h,b,e),d[b]=h);b++}return d});
Object.keys||(Object.keys=function(){var a=Object.prototype.hasOwnProperty,f=!{toString:null}.propertyIsEnumerable("toString"),c="toString toLocaleString valueOf hasOwnProperty isPrototypeOf propertyIsEnumerable constructor".split(" "),d=c.length;return function(b){if("object"!==typeof b&&("function"!==typeof b||null===b))throw new TypeError("Object.keys called on non-object");var e=[],g;for(g in b)a.call(b,g)&&e.push(g);if(f)for(g=0;g<d;g++)a.call(b,c[g])&&e.push(c[g]);return e}}());
Array.prototype.forEach||(Array.prototype.forEach=function(a,f){var c,d;if(null==this)throw new TypeError(" this is null or not defined");var b=Object(this),e=b.length>>>0;if("function"!==typeof a)throw new TypeError(a+" is not a function");1<arguments.length&&(c=f);for(d=0;d<e;){var g;d in b&&(g=b[d],a.call(c,g,d,b));d++}});
var isUndef=function(a){return"undefined"===typeof a},isNotUndef=function(a){return"undefined"!==typeof a},isFn=function(a){return"function"===typeof a},RulesEngine={version:"1.0.2",wildcard:function(){return!0},all:function(){return!0},debug:!1,buildEngine:function(a){return this.build(a.rules,a.defaultFn,a.multiMode)},build:function(a,f,c){var d=this;isNotUndef(console)&&d.debug&&console.log("-\x3e \x3d\x3d\x3d Building Rules Engine \x3d\x3d\x3d");c=isUndef(c)?!1:c;var b=this.buildRules(a,f);return{version:d.version,
privRules:b,evaluate:function(a){var f=isNotUndef(console)&&d.debug;if(isUndef(a)||null==a)isNotUndef(console)&&console.error("-\x3e Cannot evaluate null or undefined input!");else{f&&console.log("-\x3e Evaluating inputs\x3d "+d.objectToString(a)+" ---");for(var h=null,k=!1,l=0;l<b.length;l++){var m=b[l];if(d.equals(m.condition,a)&&(k=!0,isNotUndef(m.then)?(isNotUndef(console)&&console.log("-\x3e Matched rule #"+l+" - inputs\x3d"+d.objectToString(a)),h=m.then(m.params,a),f&&console.log("-\x3e Found rule match: "+
m.toString()+" output:"+h)):f&&console.log("Cannot execute undefined function!"),!c))break}k||isNotUndef(console)&&console.log("-\x3e No rule matched - inputs\x3d"+d.objectToString(a));return h}}}},buildRules:function(a,f){var c=isNotUndef(console)&&this.debug,d=[];if(isUndef(a)||null==a||isUndef(a.length)||0==a.length)throw"twoDimensionalArray must be a two dimensional array!";var b=a[0];if(0<b.filter(function(a){return"string"!==typeof a}).length)throw d="Header row must only contain strings! headers\x3d"+
b.join(","),c&&console.error(d),d;var e=b.filter(function(a){return a.indexOf&&-1===a.indexOf("p_")}),g=b.map(function(a){if(a.indexOf&&0===a.indexOf("p_"))return a.substring(2)}).filter(isNotUndef);if(0==e.length)throw"Could not find any field names! headerRow\x3d"+b.join(",");for(var b=e.length+g.length,h=1;h<a.length;h++){var k=a[h];if(isNotUndef(k)){var l=k.length;if(l!=b&&l!=b+1)throw"Expected length\x3d"+b+" but found length\x3d"+k.length+"! row#\x3d"+h;k=this.buildRule(e,g,k,f);c&&console.log(k.toString());
isNotUndef(k)&&null!==k&&(d[d.length]=k)}else c&&console.log("Rejecting undefined row: #"+h+" headers\x3d"+e.join(","))}return d},buildRule:function(a,f,c,d){var b=this,e=isNotUndef(console)&&b.debug;isUndef(d)&&(e&&console.log("-\x3e Found undefined defaultFunction, replacing with placeholder..."),d=function(){});if(isNotUndef(c)){var g=a.length,h=f.length,k={},l={};a.forEach(function(a,b){k[a]=c[b]});f.forEach(function(a,b){l[a]=c[b+g]});var m;a=c[c.length-1];g+h<c.length&&isFn(a)?(m=a,e&&console.log("-\x3e Using override function.")):
(m=d,e&&console.log("-\x3e Using default function - check1\x3d"+b.objectToString(c)));return{condition:k,params:l,then:m,toString:function(){return"Rule\x3d{ conditions: "+b.objectToString(k)+", params: "+b.objectToString(l)+", then: "+typeof m+" }"}}}},objectToString:function(a){return"("+Object.keys(a).map(function(f){return f+"\x3d"+(isFn(a[f])?"function":a[f])}).join(",")+")"},equals:function(a,f){var c=isNotUndef(console)&&this.debug,d=Object.keys(a);c&&console.log("-\x3e Checking keys: "+d.join(","));
for(var b=0;b<d.length;b++){var e=d[b];if((isUndef(a[e])||null===a[e]?a[e]===f[e]:a[e]==f[e])||isFn(a[e])&&a[e](f[e])||a[e]instanceof Array&&f[e]instanceof Array&&a[e].compare(f[e]).equal)c&&console.log("-\x3e Found match on field [rule, actual] -\x3e "+e+" ["+a[e]+" \x3d\x3d "+f[e]+"]");else return c&&console.log("-\x3e Rejecting match on field [rule, actual] -\x3e "+e+" ["+a[e]+" !\x3d "+f[e]+"]"),!1}return!0}},_re=RulesEngine;